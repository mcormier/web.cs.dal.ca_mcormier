<!-- Versata -->


<a name="Versata"><h3>Versata - Business Rules Centered Application Framework </h3></a>
<B>Description</b><BR>

<P>
Too often, software is produced with business logic tightly embedded 
in the final product, making modifications more risky and costly the closer
 to the end of the development life-cycle the change is made.

Even with a well-intentioned architecture plan problems can still arise;
as requirements change and deadlines tighten corners may
be cut during revisions to business logic.
</p>

<p>
Versata provides a framework
of tools to define business logic as a set of rules and then generates code to
fulfill these requirements.  Code is also generated for the interface and data
layers (SQL, servlets, or swing). Many consulting firms use Versata to their 
competitive advantage as it helps them more easily adapt to changing
demands.</P>

<center>
<img src="images/Versata_Stack.gif" border=0><BR>
Versata Architecture Stack
</center>
<BR>

<P>
After defining the business logic in the framework and generating 
the code, customers can add their own extensions and customize behaviour.  Any later changes
to business logic can be absorbed by tweaking the rules and 
regenerating the base framework code. For interface support, Java swing GUI's 
and support for three appservers (JBoss, Weblogic,
and WebSphere) is provided.  Most major databases are also supported by the framework (DB2,
mySql, Oracle, Microsoft SQLServer, Informix).
</P>


<center>
<img src="images/Versata_Components.gif" border=0><BR>
Versata Components
</center>
<BR><BR>


<p>

At Versata my main responsibility was fixing
defects in the product.  Working with the Versata codebase improved my code 
reading, troubleshooting, and refactoring abilities. Patching and maintaining 
many (and sometimes significantly different) supported codelines was regularly
required.



</P>
<BR>

